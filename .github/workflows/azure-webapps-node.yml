import { useState, useEffect } from 'react'
import { AlertTriangle, Shield, Wifi } from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"

type Device = {
  id: string
  name: string
  status: 'online' | 'offline' | 'compromised'
}

type SecurityAlert = {
  id: string
  deviceId: string
  message: string
  severity: 'low' | 'medium' | 'high'
}

export default function Dashboard() {
  const [devices, setDevices] = useState<Device[]>([])
  const [alerts, setAlerts] = useState<SecurityAlert[]>([])

  useEffect(() => {
    // Simulating fetching devices and alerts
    setDevices([
      { id: '1', name: 'Smart Camera', status: 'online' },
      { id: '2', name: 'Smart Lock', status: 'compromised' },
      { id: '3', name: 'Thermostat', status: 'offline' },
    ])
    setAlerts([
      { id: '1', deviceId: '2', message: 'Unusual access attempt detected', severity: 'high' },
    ])
  }, [])

  const handleIsolateDevice = (deviceId: string) => {
    // Implement device isolation logic here
    console.log(`Isolating device ${deviceId}`)
  }

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-6">IoT Security Dashboard</h1>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        <Card>
          <CardHeader>
            <CardTitle>Devices</CardTitle>
          </CardHeader>
          <CardContent>
            <ul>
              {devices.map(device => (
                <li key={device.id} className="flex items-center justify-between mb-2">
                  <span>
                    <Wifi className="inline mr-2" />
                    {device.name}
                  </span>
                  <span className={`px-2 py-1 rounded ${
                    device.status === 'online' ? 'bg-green-200 text-green-800' :
                    device.status === 'offline' ? 'bg-gray-200 text-gray-800' :
                    'bg-red-200 text-red-800'
                  }`}>
                    {device.status}
                  </span>
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader>
            <CardTitle>Security Alerts</CardTitle>
          </CardHeader>
          <CardContent>
            {alerts.map(alert => (
              <Alert key={alert.id} variant={alert.severity === 'high' ? 'destructive' : 'default'}>
                <AlertTriangle className="h-4 w-4" />
                <AlertTitle>Alert for {devices.find(d => d.id === alert.deviceId)?.name}</AlertTitle>
                <AlertDescription>{alert.message}</AlertDescription>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className="mt-2"
                  onClick={() => handleIsolateDevice(alert.deviceId)}
                >
                  Isolate Device
                </Button>
              </Alert>
            ))}
            {alerts.length === 0 && (
              <div className="text-center py-4">
                <Shield className="mx-auto mb-2" />
                No active alerts
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v3
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
